// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/protobom/sbom-convert/pkg/convert (interfaces: Reader)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_reader.go -package=mocks github.com/protobom/sbom-convert/pkg/convert Reader
//
// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	sbom "github.com/protobom/protobom/pkg/sbom"
	gomock "go.uber.org/mock/gomock"
)

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ParseStream mocks base method.
func (m *MockReader) ParseStream(arg0 io.ReadSeeker) (*sbom.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStream", arg0)
	ret0, _ := ret[0].(*sbom.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseStream indicates an expected call of ParseStream.
func (mr *MockReaderMockRecorder) ParseStream(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStream", reflect.TypeOf((*MockReader)(nil).ParseStream), arg0)
}
