# https://taskfile.dev

version: "3"

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct

vars:
  DOCKER: '{{default "docker" .DOCKER}}'

tasks:
  setup:
    desc: Install dependencies
    cmds:
      - go mod tidy

  build:
    desc: Build the binary
    sources:
      - ./**/*.go
    generates:
      - ./bin/sbom-convert
    cmds:
      - go build

  test:
    desc: Run tests
    env:
      GOARCH: amd64
      GOOS: linux
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      TEST_SOURCES: '{{default "./..." .TEST_SOURCES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
      TEST_TAGS: '{{default "unit integration" .TEST_TAGS}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -failfast -coverpkg=./... -covermode=atomic -tags="{{.TEST_TAGS}}" -coverprofile=coverage.txt -run {{.TEST_PATTERN}} -timeout=10m {{.TEST_SOURCES}}

  unit-test:
    desc: Run unit tests
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      TEST_SOURCES: '{{default "./..." .TEST_SOURCES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
      TEST_TAGS: '{{default "unit" .TEST_TAGS}}'
      TEST_RACE:
        sh: "if [[ $CGO_ENABLED = 1 ]]; then echo -race; fi"
    cmds:
      - go test {{.TEST_OPTIONS}} {{.TEST_RACE}} -tags="{{.TEST_TAGS}}" -run {{.TEST_PATTERN}} -timeout=5m {{.TEST_SOURCES}}

  update-snapshots:
    desc: Update snapshots
    env:
      CGO_ENABLED: 1
      GOARCH: amd64
      GOOS: linux
    cmds:
      - go test --tags="integration" ./... -update

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.txt

  lint:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run ./...

  ci:
    desc: Run all CI steps
    cmds:
      - task: setup
      - task: build
      - task: test

  default:
    desc: Runs the default tasks
    cmds:
      - task: ci

  goreleaser:
    desc: Run GoReleaser either in snapshot or release mode
    deps:
      - build
    vars:
      SNAPSHOT:
        sh: 'if [[ $GITHUB_REF != refs/tags/v* ]]; then echo "--snapshot"; fi'
    cmds:
      - goreleaser release --clean --timeout 60m {{.SNAPSHOT}}
